{"remainingRequest":"C:\\Users\\Renato\\Desktop\\Ubiqum\\TGIF Project\\node_modules\\vue-loader\\lib\\loaders\\templateLoader.js??vue-loader-options!C:\\Users\\Renato\\Desktop\\Ubiqum\\TGIF Project\\node_modules\\cache-loader\\dist\\cjs.js??ref--0-0!C:\\Users\\Renato\\Desktop\\Ubiqum\\TGIF Project\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!C:\\Users\\Renato\\Desktop\\Ubiqum\\TGIF Project\\src\\components\\home.vue?vue&type=template&id=957c9522&","dependencies":[{"path":"C:\\Users\\Renato\\Desktop\\Ubiqum\\TGIF Project\\src\\components\\home.vue","mtime":1579706231073},{"path":"C:\\Users\\Renato\\Desktop\\Ubiqum\\TGIF Project\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1579703947536},{"path":"C:\\Users\\Renato\\Desktop\\Ubiqum\\TGIF Project\\node_modules\\vue-loader\\lib\\loaders\\templateLoader.js","mtime":1579703985046},{"path":"C:\\Users\\Renato\\Desktop\\Ubiqum\\TGIF Project\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1579703947536},{"path":"C:\\Users\\Renato\\Desktop\\Ubiqum\\TGIF Project\\node_modules\\vue-loader\\lib\\index.js","mtime":1579703985042}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"}]}