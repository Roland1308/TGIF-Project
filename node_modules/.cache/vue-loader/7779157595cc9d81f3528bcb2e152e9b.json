{"remainingRequest":"C:\\Users\\Renato\\Desktop\\Ubiqum\\TGIF Project\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!C:\\Users\\Renato\\Desktop\\Ubiqum\\TGIF Project\\src\\components\\home.vue?vue&type=template&id=957c9522&","dependencies":[{"path":"C:\\Users\\Renato\\Desktop\\Ubiqum\\TGIF Project\\src\\components\\home.vue","mtime":1579704645075},{"path":"C:\\Users\\Renato\\Desktop\\Ubiqum\\TGIF Project\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1579703947536},{"path":"C:\\Users\\Renato\\Desktop\\Ubiqum\\TGIF Project\\node_modules\\vue-loader\\lib\\loaders\\templateLoader.js","mtime":1579703985046},{"path":"C:\\Users\\Renato\\Desktop\\Ubiqum\\TGIF Project\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1579703947536},{"path":"C:\\Users\\Renato\\Desktop\\Ubiqum\\TGIF Project\\node_modules\\vue-loader\\lib\\index.js","mtime":1579703985042}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:CjxkaXYgY2xhc3M9InJvdyI+CiAgICA8ZGl2IGNsYXNzPSJjb2wtOCI+CiAgICAgICAgPCEtLUFjY29yZGlvbiB3cmFwcGVyLS0+CiAgICAgICAgPGRpdiBjbGFzcz0iYWNjb3JkaW9uIG1kLWFjY29yZGlvbiBhY2NvcmRpb24tNCIgaWQ9ImFjY29yZGlvbkV4MiIgcm9sZT0idGFibGlzdCIKICAgICAgICAgICAgYXJpYS1tdWx0aXNlbGVjdGFibGU9InRydWUiPgogICAgICAgICAgICA8IS0tIEFjY29yZGlvbiBjYXJkIC0tPgogICAgICAgICAgICA8ZGl2IGNsYXNzPSJjYXJkIj4KICAgICAgICAgICAgICAgIDwhLS0gQ2FyZCBoZWFkZXIgLS0+CiAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJjYXJkLWhlYWRlciB6LWRlcHRoLTEgdGVhbCBsaWdodGVuLTQiIHJvbGU9InRhYiIgaWQ9ImhlYWRpbmcxMCI+CiAgICAgICAgICAgICAgICAgICAgPGEgY2xhc3M9ImNvbGxhcHNlZCIgZGF0YS10b2dnbGU9ImNvbGxhcHNlIiBkYXRhLXBhcmVudD0iI2FjY29yZGlvbkV4MiIgaHJlZj0iI2NvbGxhcHNlMTAiCiAgICAgICAgICAgICAgICAgICAgICAgIGFyaWEtZXhwYW5kZWQ9InRydWUiIGFyaWEtY29udHJvbHM9ImNvbGxhcHNlMTAiPgogICAgICAgICAgICAgICAgICAgICAgICA8aDQgY2xhc3M9Im1iLTAgYmxhY2stdGV4dCB0ZXh0LWNlbnRlciBmb250LXdlaWdodC1ib2xkIHRleHQtdXBwZXJjYXNlIj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIEFib3V0IFVzCiAgICAgICAgICAgICAgICAgICAgICAgIDwvaDQ+CiAgICAgICAgICAgICAgICAgICAgPC9hPgogICAgICAgICAgICAgICAgPC9kaXY+CgogICAgICAgICAgICAgICAgPCEtLSBDYXJkIGJvZHkgLS0+CiAgICAgICAgICAgICAgICA8ZGl2IGlkPSJjb2xsYXBzZTEwIiBjbGFzcz0iY29sbGFwc2UiIHJvbGU9InRhYnBhbmVsIiBhcmlhLWxhYmVsbGVkYnk9ImhlYWRpbmcxMCIKICAgICAgICAgICAgICAgICAgICBkYXRhLXBhcmVudD0iI2FjY29yZGlvbkV4MiI+CiAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iY2FyZC1ib2R5IHJnYmEtdGVhbC1zdHJvbmcgd2hpdGUtdGV4dCI+CiAgICAgICAgICAgICAgICAgICAgICAgIDxwPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgT3Blbm5lc3MsIGFjY291bnRhYmlsaXR5LCBhbmQgaG9uZXN0eSBkZWZpbmUgZ292ZXJubWVudCB0cmFuc3BhcmVuY3kuIEluIGEgZnJlZQogICAgICAgICAgICAgICAgICAgICAgICAgICAgc29jaWV0eSwgdHJhbnNwYXJlbmN5IGlzIGdvdmVybm1lbnQncyBvYmxpZ2F0aW9uIHRvIHNoYXJlIGluZm9ybWF0aW9uIHdpdGgKICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNpdGl6ZW5zLiBJdCBpcyBhdCB0aGUgaGVhcnQgb2YgaG93IGNpdGl6ZW5zIGhvbGQgdGhlaXIgcHVibGljIG9mZmljaWFscwogICAgICAgICAgICAgICAgICAgICAgICAgICAgYWNjb3VudGFibGUuIEhlcmUgYXQgVEdJRiB3ZSBiZWxpZXZlIHRoYXQgZ292ZXJubWVudCBzaG91bGQgYmUgdHJhbnNwYXJlbnQuCiAgICAgICAgICAgICAgICAgICAgICAgIDwvcD4KICAgICAgICAgICAgICAgICAgICAgICAgPHA+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICBHb3Zlcm5tZW50cyBleGlzdCB0byBzZXJ2ZSB0aGUgcGVvcGxlLiBJbmZvcm1hdGlvbiBvbiBob3cgb2ZmaWNpYWxzIGNvbmR1Y3QgdGhlCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBwdWJsaWMgYnVzaW5lc3MgYW5kIHNwZW5kIHRheHBheWVyIG1vbmV5IG11c3QgYmUgcmVhZGlseSBhdmFpbGFibGUgYW5kIGVhc2lseQogICAgICAgICAgICAgICAgICAgICAgICAgICAgdW5kZXJzdG9vZC4gVGhpcyB0cmFuc3BhcmVuY3kgYWxsb3dzIGdvb2QgYW5kIGp1c3QgZ292ZXJuYW5jZS4gVHJhbnNwYXJlbmN5CiAgICAgICAgICAgICAgICAgICAgICAgICAgICBwcm9tb3RlcyBhY2NvdW50YWJpbGl0eSBhbmQgcHJvdmlkZXMgaW5mb3JtYXRpb24gZm9yIGNpdGl6ZW5zIGFib3V0IHdoYXQgdGhlaXIKICAgICAgICAgICAgICAgICAgICAgICAgICAgIEdvdmVybm1lbnQgaXMgZG9pbmcuCiAgICAgICAgICAgICAgICAgICAgICAgIDwvcD4KICAgICAgICAgICAgICAgICAgICAgICAgPHA+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICBXZSBhbHNvIGJlbGlldmUgdGhhdCBnb3Zlcm5tZW50IHNob3VsZCBiZSBwYXJ0aWNpcGF0b3J5LiBQdWJsaWMgZW5nYWdlbWVudAogICAgICAgICAgICAgICAgICAgICAgICAgICAgZW5oYW5jZXMgdGhlIEdvdmVybm1lbnQncyBlZmZlY3RpdmVuZXNzIGFuZCBpbXByb3ZlcyB0aGUgcXVhbGl0eSBvZiBpdHMKICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRlY2lzaW9ucy4gS25vd2xlZGdlIGlzIHdpZGVseSBkaXNwZXJzZWQgaW4gc29jaWV0eSwgYW5kIHB1YmxpYyBvZmZpY2lhbHMKICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJlbmVmaXQgZnJvbSBoYXZpbmcgYWNjZXNzIHRvIHRoYXQgZGlzcGVyc2VkIGtub3dsZWRnZS4gV2UgaW52aXRlIHlvdSB0byB1c2Ugb3VyCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBzaXRlIHRvIGJlY29tZSBhY3RpdmVseSBlbmdhZ2VkIGluIEFtZXJpY2FuIGdvdmVybm1lbnQuCiAgICAgICAgICAgICAgICAgICAgICAgIDwvcD4KICAgICAgICAgICAgICAgICAgICAgICAgPHA+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICBUR0lGIHdvcmtzIHRvIGRpc2Nsb3NlIGluZm9ybWF0aW9uIGluIGZvcm1zIHRoYXQgdGhlIHB1YmxpYyBjYW4gcmVhZGlseSBmaW5kIGFuZAogICAgICAgICAgICAgICAgICAgICAgICAgICAgdXNlLiBXZSBzb2xpY2l0IHB1YmxpYyBmZWVkYmFjayB0byBpZGVudGlmeSBpbmZvcm1hdGlvbiBvZiBncmVhdGVzdCB1c2UgdG8gdGhlCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBwdWJsaWMuCiAgICAgICAgICAgICAgICAgICAgICAgIDwvcD4KICAgICAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgPCEtLSBBY2NvcmRpb24gY2FyZCAtLT4KCiAgICAgICAgICAgIDwhLS0gQWNjb3JkaW9uIGNhcmQgLS0+CiAgICAgICAgICAgIDxkaXYgY2xhc3M9ImNhcmQiPgogICAgICAgICAgICAgICAgPCEtLSBDYXJkIGhlYWRlciAtLT4KICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImNhcmQtaGVhZGVyIHotZGVwdGgtMSB0ZWFsIGxpZ2h0ZW4tMyIgcm9sZT0idGFiIiBpZD0iaGVhZGluZzExIj4KICAgICAgICAgICAgICAgICAgICA8YSBjbGFzcz0iY29sbGFwc2VkIiBkYXRhLXRvZ2dsZT0iY29sbGFwc2UiIGRhdGEtcGFyZW50PSIjYWNjb3JkaW9uRXgyIiBocmVmPSIjY29sbGFwc2UxMSIKICAgICAgICAgICAgICAgICAgICAgICAgYXJpYS1leHBhbmRlZD0idHJ1ZSIgYXJpYS1jb250cm9scz0iY29sbGFwc2UxMSI+CiAgICAgICAgICAgICAgICAgICAgICAgIDxoNCBjbGFzcz0ibWItMCBibGFjay10ZXh0IHRleHQtY2VudGVyIGZvbnQtd2VpZ2h0LWJvbGQgdGV4dC11cHBlcmNhc2UiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgQmFja2dyb3VuZCBIaXN0b3J5IG9mIEdvdmVybm1lbnQgVHJhbnNwYXJlbmN5CiAgICAgICAgICAgICAgICAgICAgICAgIDwvaDQ+CiAgICAgICAgICAgICAgICAgICAgPC9hPgogICAgICAgICAgICAgICAgPC9kaXY+CgogICAgICAgICAgICAgICAgPCEtLSBDYXJkIGJvZHkgLS0+CiAgICAgICAgICAgICAgICA8ZGl2IGlkPSJjb2xsYXBzZTExIiBjbGFzcz0iY29sbGFwc2UiIHJvbGU9InRhYnBhbmVsIiBhcmlhLWxhYmVsbGVkYnk9ImhlYWRpbmcxMSIKICAgICAgICAgICAgICAgICAgICBkYXRhLXBhcmVudD0iI2FjY29yZGlvbkV4MiI+CiAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iY2FyZC1ib2R5IHJnYmEtdGVhbC1zdHJvbmcgd2hpdGUtdGV4dCI+CiAgICAgICAgICAgICAgICAgICAgICAgIDxwPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgSW4gdGhlIFdlc3QsIHRoZSBpZGVhIHRoYXQgZ292ZXJubWVudCBzaG91bGQgYmUgb3BlbiB0byBwdWJsaWMgc2NydXRpbnkgYW5kCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBzdXNjZXB0aWJsZSB0byBwdWJsaWMgb3BpbmlvbiBkYXRlcyBiYWNrIGF0IGxlYXN0IHRvIHRoZSB0aW1lIG9mIHRoZQogICAgICAgICAgICAgICAgICAgICAgICAgICAgRW5saWdodGVubWVudCwgd2hlbiBtYW55IHBoaWxvc29waGVzIG1hZGUgYW4gYXR0YWNrIG9uIGFic29sdXRpc3QgZG9jdHJpbmUgb2YKICAgICAgICAgICAgICAgICAgICAgICAgICAgIHN0YXRlIHNlY3JlY3ksIGEgY29yZSBwYXJ0IG9mIHRoZWlyIGludGVsbGVjdHVhbCBwcm9qZWN0LiBUaGUgcGFzc2FnZSBvZiBmb3JtYWwKICAgICAgICAgICAgICAgICAgICAgICAgICAgIGxlZ2lzbGF0aXZlIGluc3RydW1lbnRzIHRvIHRoaXMgZW5kIGNhbiBhbHNvIGJlIHRyYWNlZCB0byB0aGlzIHRpbWUgd2l0aCBTd2VkZW4sCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBmb3IgZXhhbXBsZSwgKHdoaWNoIHRoZW4gaW5jbHVkZWQgRmlubGFuZCBhcyBhIFN3ZWRpc2gtZ292ZXJuZWQgdGVycml0b3J5KQogICAgICAgICAgICAgICAgICAgICAgICAgICAgZW5hY3RpbmcgZnJlZSBwcmVzcyBsZWdpc2xhdGlvbiBhcyBwYXJ0IG9mIGl0cyBjb25zdGl0dXRpb24gKEZyZWVkb20gb2YgdGhlCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBQcmVzcyBBY3QsIDE3NjYpLiBUaGlzIGFwcHJvYWNoLCBhbmQgdGhhdCBvZiB0aGUgcGhpbG9zb3BoZXMgbW9yZSBicm9hZGx5LCBpcwogICAgICAgICAgICAgICAgICAgICAgICAgICAgc3Ryb25nbHkgcmVsYXRlZCB0byByZWNlbnQgaGlzdG9yaW9ncmFwaHkgb24gdGhlIGVpZ2h0ZWVudGgtY2VudHVyeSBwdWJsaWMKICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNwaGVyZS4KICAgICAgICAgICAgICAgICAgICAgICAgPC9wPgoKICAgICAgICAgICAgICAgICAgICAgICAgPHA+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICBJbmZsdWVuY2VkIGJ5IEVubGlnaHRlbm1lbnQgdGhvdWdodCwgdGhlIHJldm9sdXRpb25zIGluIEFtZXJpY2EgKDE3NzYpIGFuZAogICAgICAgICAgICAgICAgICAgICAgICAgICAgRnJhbmNlICgxNzg5KSwgZnJlZWRvbSBvZiB0aGUgcHJlc3MgZW5zaHJpbmVkIHByb3Zpc2lvbnMgYW5kIHJlcXVpcmVtZW50cyBmb3IKICAgICAgICAgICAgICAgICAgICAgICAgICAgIHB1YmxpYyBidWRnZXRhcnkgYWNjb3VudGluZyBhbmQgZnJlZWRvbSBvZiB0aGUgcHJlc3MgaW4gY29uc3RpdHV0aW9uYWwgYXJ0aWNsZXMuCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBJbiB0aGUgbmluZXRlZW50aCBjZW50dXJ5LCBhdHRlbXB0cyBieSBNZXR0ZXJuaWNoZWFuIHN0YXRlc21lbiB0byByb3cgYmFjayBvbgogICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhlc2UgbWVhc3VyZXMgd2VyZSB2aWdvcm91c2x5IG9wcG9zZWQgYnkgYSBudW1iZXIgb2YgZW1pbmVudCBsaWJlcmFsCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBwb2xpdGljaWFucyBhbmQgd3JpdGVycywgQmVudGhhbSwgTWlsbCBhbmQgQWN0b24gcHJvbWluZW50IGFtb25nIHRoZSBsYXR0ZXIuCiAgICAgICAgICAgICAgICAgICAgICAgIDwvcD4KCiAgICAgICAgICAgICAgICAgICAgICAgIDxwPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgT3BlbiBnb3Zlcm5tZW50IGlzIHdpZGVseSBzZWVuIHRvIGJlIGEga2V5IGhhbGxtYXJrIG9mIGNvbnRlbXBvcmFyeSBkZW1vY3JhdGljCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBwcmFjdGljZSBhbmQgaXMgb2Z0ZW4gbGlua2VkIHRvIHRoZSBwYXNzaW5nIG9mIGZyZWVkb20gb2YgaW5mb3JtYXRpb24KICAgICAgICAgICAgICAgICAgICAgICAgICAgIGxlZ2lzbGF0aW9uLiBTY2FuZGluYXZpYW4gY291bnRyaWVzIGNsYWltIHRvIGhhdmUgYWRvcHRlZCB0aGUgZmlyc3QgZnJlZWRvbSBvZgogICAgICAgICAgICAgICAgICAgICAgICAgICAgaW5mb3JtYXRpb24gbGVnaXNsYXRpb24sIGRhdGluZyB0aGUgb3JpZ2lucyBvZiBpdHMgbW9kZXJuIHByb3Zpc2lvbnMgdG8gdGhlCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBlaWdodGVlbnRoIGNlbnR1cnkgYW5kIEZpbmxhbmQgY29udGludWluZyB0aGUgcHJlc3VtcHRpb24gb2Ygb3Blbm5lc3MgYWZ0ZXIKICAgICAgICAgICAgICAgICAgICAgICAgICAgIGdhaW5pbmcgaW5kZXBlbmRlbmNlIGluIDE5MTcsIHBhc3NpbmcgaXRzIEFjdCBvbiBQdWJsaWNpdHkgb2YgT2ZmaWNpYWwgRG9jdW1lbnRzCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpbiAxOTUxIChzdXBlcnNlZGVkIGJ5IG5ldyBsZWdpc2xhdGlvbiBpbiAxOTk5KS4KICAgICAgICAgICAgICAgICAgICAgICAgPC9wPgoKICAgICAgICAgICAgICAgICAgICAgICAgPHA+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICBUaGUgVW5pdGVkIFN0YXRlcyBwYXNzZWQgaXRzIEZyZWVkb20gb2YgSW5mb3JtYXRpb24gQWN0IChGT0lBKSBpbiAxOTY2LCBGT0lBcywKICAgICAgICAgICAgICAgICAgICAgICAgICAgIEFjY2VzcyB0byBJbmZvcm1hdGlvbiBBY3RzIChBSUFzKSBvciBlcXVpdmFsZW50IGxhd3Mgd2VyZSBwYXNzZWQgaW4gRGVubWFyayBhbmQKICAgICAgICAgICAgICAgICAgICAgICAgICAgIE5vcndheSBpbiAxOTcwLgogICAgICAgICAgICAgICAgICAgICAgICA8L3A+CiAgICAgICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgPC9kaXY+CiAgICAgICAgPCEtLSBBY2NvcmRpb24gY2FyZCAtLT4KICAgIDwvZGl2PgogICAgPGRpdiBjbGFzcz0iY29sLTQiPgogICAgICAgIDxpbWcgc3JjPSIuLlwuLlxwdWJsaWNcSW1hZ2VzXG15aG9tZS5qcGciIGFsdD0iIiB3aWR0aD0iMTAwJSIgLz4KICAgIDwvZGl2Pgo8L2Rpdj4K"},null]}